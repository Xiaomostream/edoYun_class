/*
1.转换单元
将写好的每个源⽂件(.cpp/.c)与其包含的头⽂件“#include<xx.xh>”合并后形成的整体称为转换单元（也称翻译单元或编译单元）
在编译过程中，编译器将每个转换单元单独编译⽣成对应的对象⽂件(.obj)，
            对象⽂件包含：机器码 + 外部引⽤信息（本转换单元未定义的对象）.
在链接过程中，链接器将所有对象⽂件链接⽣成最终⽬标程序。
            若对象⽂件A中引⽤了其他转换单元定义的对象，链接器会在其他对象⽂件中查找该定义
            若所有对象⽂件中都找不到定义，则产⽣链接错误
2. ODR
任何的变量函数，类，枚举，模板，概念（C++20）在每个转换单元中都只允许有一个定义（声明可以有多个）；
非inline的函数或变量C++17，在整个程序中，有且仅有一个定义。
*/

#include <iostream>
extern const int pt;
inline int a = 5;
void p()
{
    std::cout << "3p\n";
}
static void test() //不推荐这样写
{
    std::cout << "static test!\n";
}
extern void TestX();
extern int x;
int main()
{
    test();
    p();
    std::cout << a << '\n';
    TestX();
    std::cout << "pt = " << pt << '\n';
    std::cout << "x = " << x << '\n';
}

// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门使用技巧: 
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件
